Task 6
const countModule = function(){
	let counter = 0;	
	function add(){
		counter+=1;
	}
	function reset(){
		counter = 0;
	}
	return{
		add: function(){
			add();
		},
		reset: function(){
			reset();
		},
		value: function(){
			return counter;
		}
	}
}


Task 7 
- 'counter' is a free variable.
- Free variable is a variable that is used in the function, which is not the local parameter nor parameters of that function.


Task 8 
const countModule = function(){
	let counter = 0;	
	function add(){
		counter+=1;
	}
	function reset(){
		counter=0;
	}
	function makeAdder(inc){
		for(let i=0;i<inc;i++){
			return add();
		}
	}
	return{
		add: function(){
			add();
		},
		reset: function(){
			reset();
		},
		makeAdder: function(inc){
			for(let i=0;i<inc;i++){
				add();
			}
			
		},
		value: function(){
			return counter;
		}
	}
}


Task 9
- The solution is the "Module Pattern". Because by using Module Pattern, we can protect our code and avoid globals.
Module Pattern provides privacy thanks to closure.

(function(params) {
//here we'll put the JS code
statements; 
}(params));


Task 10
const Employee = (function(){
	let name;
	let age;
	let salary;
	
	const getAge = function(){
		return age;
	};
	const getSalary = function(){
		return salary;
	};
	const getName = function(){
		return name;
	};
	const setAge = function(newAge){
		age = newAge;
	};
	const setSalary = function(newSalary){
		salary = newSalary;
	};
	const setName = function(newName){
		name = newName;
	};
	const increaseSalary = function(percentage){
		salary = getSaraly + getSaraly()*percentage/100;
	};
	const incrementAge = function(){
		age = getAge() + 1;
	};
	return{
		setAge: setAge,
		setSalary: setSalary,
		setName: setName,
		increaseSalary: increaseSalary,
		incrementAge: incrementAge
	};
})();


Task 11
Employee.setAddress = function(newAddress){
	address = newAddress;
}

Employee.getAddress = function(){
	return address;
}